/// Generated by the Protocol Buffers 3.5.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "control_service.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ControlServiceRoot {
    public static let `default` = ControlServiceRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class ErrorCode : GeneratedMessage {
    public typealias BuilderType = ErrorCode.Builder

    public static func == (lhs: ErrorCode, rhs: ErrorCode) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasErrorCode == rhs.hasErrorCode) && (!lhs.hasErrorCode || lhs.errorCode == rhs.errorCode)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var errorCode:UInt32! = nil
    public fileprivate(set) var hasErrorCode:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasErrorCode {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ErrorCode.self): field \"errorCode\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasErrorCode {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:errorCode)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasErrorCode {
            serialize_size += errorCode.computeUInt32Size(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ErrorCode.Builder {
        return ErrorCode.classBuilder() as! ErrorCode.Builder
    }
    public func getBuilder() -> ErrorCode.Builder {
        return classBuilder() as! ErrorCode.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ErrorCode.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ErrorCode.Builder()
    }
    public func toBuilder() throws -> ErrorCode.Builder {
        return try ErrorCode.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ErrorCode) throws -> ErrorCode.Builder {
        return try ErrorCode.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasErrorCode {
            jsonMap["errorCode"] = UInt(errorCode)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ErrorCode {
        return try ErrorCode.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> ErrorCode {
        return try ErrorCode.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasErrorCode {
            output += "\(indent) errorCode: \(errorCode) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasErrorCode {
                hashCode = (hashCode &* 31) &+ errorCode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ErrorCode"
    }
    override public func className() -> String {
        return "ErrorCode"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ErrorCode = ErrorCode()
        public func getMessage() -> ErrorCode {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var errorCode:UInt32 {
            get {
                return builderResult.errorCode
            }
            set (value) {
                builderResult.hasErrorCode = true
                builderResult.errorCode = value
            }
        }
        public var hasErrorCode:Bool {
            get {
                return builderResult.hasErrorCode
            }
        }
        @discardableResult
        public func setErrorCode(_ value:UInt32) -> ErrorCode.Builder {
            self.errorCode = value
            return self
        }
        @discardableResult
        public func clearErrorCode() -> ErrorCode.Builder{
            builderResult.hasErrorCode = false
            builderResult.errorCode = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ErrorCode.Builder {
            builderResult = ErrorCode()
            return self
        }
        override public func clone() throws -> ErrorCode.Builder {
            return try ErrorCode.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ErrorCode {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ErrorCode {
            let returnMe:ErrorCode = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ErrorCode) throws -> ErrorCode.Builder {
            if other == ErrorCode() {
                return self
            }
            if other.hasErrorCode {
                errorCode = other.errorCode
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ErrorCode.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ErrorCode.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    errorCode = try codedInputStream.readUInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ErrorCode.Builder {
            let resultDecodedBuilder = ErrorCode.Builder()
            if let jsonValueErrorCode = jsonMap["errorCode"] as? UInt {
                resultDecodedBuilder.errorCode = UInt32(jsonValueErrorCode)
            } else if let jsonValueErrorCode = jsonMap["errorCode"] as? String {
                resultDecodedBuilder.errorCode = UInt32(jsonValueErrorCode)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> ErrorCode.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ErrorCode.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension ErrorCode: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ErrorCode> {
        var mergedArray = Array<ErrorCode>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ErrorCode? {
        return try ErrorCode.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ErrorCode {
        return try ErrorCode.Builder().mergeFrom(data: data, extensionRegistry:ControlServiceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ErrorCode {
        return try ErrorCode.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ErrorCode {
        return try ErrorCode.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ErrorCode {
        return try ErrorCode.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ErrorCode {
        return try ErrorCode.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ErrorCode {
        return try ErrorCode.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "errorCode": return self.errorCode
        default: return nil
        }
    }
}
extension ErrorCode.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ErrorCode
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "errorCode": return self.errorCode
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "errorCode":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.errorCode = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
