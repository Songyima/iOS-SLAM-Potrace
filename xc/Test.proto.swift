/// Generated by the Protocol Buffers 3.5.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "test.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers

public struct TestRoot {
    public static let `default` = TestRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

///not neccesary
///import "sofa/pbrpc/rpc_option.proto";
final public class FooRequest : GeneratedMessage {
    public typealias BuilderType = FooRequest.Builder

    public static func == (lhs: FooRequest, rhs: FooRequest) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var code:Int32! = nil
    public fileprivate(set) var hasCode:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasCode {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(FooRequest.self): field \"code\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasCode {
            try codedOutputStream.writeInt32(fieldNumber: 1, value:code)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasCode {
            serialize_size += code.computeInt32Size(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> FooRequest.Builder {
        return FooRequest.classBuilder() as! FooRequest.Builder
    }
    public func getBuilder() -> FooRequest.Builder {
        return classBuilder() as! FooRequest.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return FooRequest.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return FooRequest.Builder()
    }
    public func toBuilder() throws -> FooRequest.Builder {
        return try FooRequest.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:FooRequest) throws -> FooRequest.Builder {
        return try FooRequest.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasCode {
            jsonMap["code"] = Int(code)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> FooRequest {
        return try FooRequest.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> FooRequest {
        return try FooRequest.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasCode {
            output += "\(indent) code: \(code) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCode {
                hashCode = (hashCode &* 31) &+ code.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "FooRequest"
    }
    override public func className() -> String {
        return "FooRequest"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:FooRequest = FooRequest()
        public func getMessage() -> FooRequest {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var code:Int32 {
            get {
                return builderResult.code
            }
            set (value) {
                builderResult.hasCode = true
                builderResult.code = value
            }
        }
        public var hasCode:Bool {
            get {
                return builderResult.hasCode
            }
        }
        @discardableResult
        public func setCode(_ value:Int32) -> FooRequest.Builder {
            self.code = value
            return self
        }
        @discardableResult
        public func clearCode() -> FooRequest.Builder{
            builderResult.hasCode = false
            builderResult.code = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> FooRequest.Builder {
            builderResult = FooRequest()
            return self
        }
        override public func clone() throws -> FooRequest.Builder {
            return try FooRequest.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> FooRequest {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> FooRequest {
            let returnMe:FooRequest = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:FooRequest) throws -> FooRequest.Builder {
            if other == FooRequest() {
                return self
            }
            if other.hasCode {
                code = other.code
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> FooRequest.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> FooRequest.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    code = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> FooRequest.Builder {
            let resultDecodedBuilder = FooRequest.Builder()
            if let jsonValueCode = jsonMap["code"] as? Int {
                resultDecodedBuilder.code = Int32(jsonValueCode)
            } else if let jsonValueCode = jsonMap["code"] as? String {
                resultDecodedBuilder.code = Int32(jsonValueCode)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> FooRequest.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try FooRequest.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class FooResponse : GeneratedMessage {
    public typealias BuilderType = FooResponse.Builder

    public static func == (lhs: FooResponse, rhs: FooResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var text:String! = nil
    public fileprivate(set) var hasText:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasText {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(FooResponse.self): field \"text\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasText {
            try codedOutputStream.writeString(fieldNumber: 1, value:text)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasText {
            serialize_size += text.computeStringSize(fieldNumber: 1)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> FooResponse.Builder {
        return FooResponse.classBuilder() as! FooResponse.Builder
    }
    public func getBuilder() -> FooResponse.Builder {
        return classBuilder() as! FooResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return FooResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return FooResponse.Builder()
    }
    public func toBuilder() throws -> FooResponse.Builder {
        return try FooResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:FooResponse) throws -> FooResponse.Builder {
        return try FooResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasText {
            jsonMap["text"] = text
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> FooResponse {
        return try FooResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> FooResponse {
        return try FooResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasText {
            output += "\(indent) text: \(text) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasText {
                hashCode = (hashCode &* 31) &+ text.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "FooResponse"
    }
    override public func className() -> String {
        return "FooResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:FooResponse = FooResponse()
        public func getMessage() -> FooResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var text:String {
            get {
                return builderResult.text
            }
            set (value) {
                builderResult.hasText = true
                builderResult.text = value
            }
        }
        public var hasText:Bool {
            get {
                return builderResult.hasText
            }
        }
        @discardableResult
        public func setText(_ value:String) -> FooResponse.Builder {
            self.text = value
            return self
        }
        @discardableResult
        public func clearText() -> FooResponse.Builder{
            builderResult.hasText = false
            builderResult.text = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> FooResponse.Builder {
            builderResult = FooResponse()
            return self
        }
        override public func clone() throws -> FooResponse.Builder {
            return try FooResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> FooResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> FooResponse {
            let returnMe:FooResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:FooResponse) throws -> FooResponse.Builder {
            if other == FooResponse() {
                return self
            }
            if other.hasText {
                text = other.text
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> FooResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> FooResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    text = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> FooResponse.Builder {
            let resultDecodedBuilder = FooResponse.Builder()
            if let jsonValueText = jsonMap["text"] as? String {
                resultDecodedBuilder.text = jsonValueText
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> FooResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try FooResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension FooRequest: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<FooRequest> {
        var mergedArray = Array<FooRequest>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> FooRequest? {
        return try FooRequest.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> FooRequest {
        return try FooRequest.Builder().mergeFrom(data: data, extensionRegistry:TestRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> FooRequest {
        return try FooRequest.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> FooRequest {
        return try FooRequest.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> FooRequest {
        return try FooRequest.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> FooRequest {
        return try FooRequest.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> FooRequest {
        return try FooRequest.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "code": return self.code
        default: return nil
        }
    }
}
extension FooRequest.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = FooRequest
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "code": return self.code
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "code":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.code = newSubscriptValue
            default: return
            }
        }
    }
}
extension FooResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<FooResponse> {
        var mergedArray = Array<FooResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> FooResponse? {
        return try FooResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> FooResponse {
        return try FooResponse.Builder().mergeFrom(data: data, extensionRegistry:TestRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> FooResponse {
        return try FooResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> FooResponse {
        return try FooResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> FooResponse {
        return try FooResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> FooResponse {
        return try FooResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> FooResponse {
        return try FooResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "text": return self.text
        default: return nil
        }
    }
}
extension FooResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = FooResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
