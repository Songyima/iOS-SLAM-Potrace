/// Generated by the Protocol Buffers 3.5.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "map.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct MapRoot {
    public static let `default` = MapRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class MapCell : GeneratedMessage {
    public typealias BuilderType = MapCell.Builder

    public static func == (lhs: MapCell, rhs: MapCell) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasX == rhs.hasX) && (!lhs.hasX || lhs.x == rhs.x)
        fieldCheck = fieldCheck && (lhs.hasY == rhs.hasY) && (!lhs.hasY || lhs.y == rhs.y)
        fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



        //Enum type declaration start 

        public enum Value:Int32, GeneratedEnum {
            case free = 0
            case obstacle = 1
            case unknown = 2
            public func toString() -> String {
                switch self {
                case .free: return "FREE"
                case .obstacle: return "OBSTACLE"
                case .unknown: return "UNKNOWN"
                }
            }
            public static func fromString(_ str:String) throws -> MapCell.Value {
                switch str {
                case "FREE":    return .free
                case "OBSTACLE":    return .obstacle
                case "UNKNOWN":    return .unknown
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .free: return ".free"
                case .obstacle: return ".obstacle"
                case .unknown: return ".unknown"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:Value, rhs:Value) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var x:UInt32! = nil
    public fileprivate(set) var hasX:Bool = false

    public fileprivate(set) var y:UInt32! = nil
    public fileprivate(set) var hasY:Bool = false

    public fileprivate(set) var value:MapCell.Value = MapCell.Value.unknown
    public fileprivate(set) var hasValue:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasX {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MapCell.self): field \"x\" mark required")
        }
        if !hasY {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(MapCell.self): field \"y\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasX {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:x)
        }
        if hasY {
            try codedOutputStream.writeUInt32(fieldNumber: 2, value:y)
        }
        if hasValue {
            try codedOutputStream.writeEnum(fieldNumber: 3, value:value.rawValue)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasX {
            serialize_size += x.computeUInt32Size(fieldNumber: 1)
        }
        if hasY {
            serialize_size += y.computeUInt32Size(fieldNumber: 2)
        }
        if (hasValue) {
            serialize_size += value.rawValue.computeEnumSize(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> MapCell.Builder {
        return MapCell.classBuilder() as! MapCell.Builder
    }
    public func getBuilder() -> MapCell.Builder {
        return classBuilder() as! MapCell.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MapCell.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return MapCell.Builder()
    }
    public func toBuilder() throws -> MapCell.Builder {
        return try MapCell.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:MapCell) throws -> MapCell.Builder {
        return try MapCell.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasX {
            jsonMap["x"] = UInt(x)
        }
        if hasY {
            jsonMap["y"] = UInt(y)
        }
        if hasValue {
            jsonMap["value"] = value.toString()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> MapCell {
        return try MapCell.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> MapCell {
        return try MapCell.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasX {
            output += "\(indent) x: \(x) \n"
        }
        if hasY {
            output += "\(indent) y: \(y) \n"
        }
        if (hasValue) {
            output += "\(indent) value: \(value.description)\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasX {
                hashCode = (hashCode &* 31) &+ x.hashValue
            }
            if hasY {
                hashCode = (hashCode &* 31) &+ y.hashValue
            }
            if hasValue {
                 hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "MapCell"
    }
    override public func className() -> String {
        return "MapCell"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:MapCell = MapCell()
        public func getMessage() -> MapCell {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var x:UInt32 {
            get {
                return builderResult.x
            }
            set (value) {
                builderResult.hasX = true
                builderResult.x = value
            }
        }
        public var hasX:Bool {
            get {
                return builderResult.hasX
            }
        }
        @discardableResult
        public func setX(_ value:UInt32) -> MapCell.Builder {
            self.x = value
            return self
        }
        @discardableResult
        public func clearX() -> MapCell.Builder{
            builderResult.hasX = false
            builderResult.x = nil
            return self
        }
        public var y:UInt32 {
            get {
                return builderResult.y
            }
            set (value) {
                builderResult.hasY = true
                builderResult.y = value
            }
        }
        public var hasY:Bool {
            get {
                return builderResult.hasY
            }
        }
        @discardableResult
        public func setY(_ value:UInt32) -> MapCell.Builder {
            self.y = value
            return self
        }
        @discardableResult
        public func clearY() -> MapCell.Builder{
            builderResult.hasY = false
            builderResult.y = nil
            return self
        }
            public var value:MapCell.Value {
                get {
                    return builderResult.value
                }
                set (value) {
                    builderResult.hasValue = true
                    builderResult.value = value
                }
            }
            public var hasValue:Bool{
                get {
                    return builderResult.hasValue
                }
            }
        @discardableResult
            public func setValue(_ value:MapCell.Value) -> MapCell.Builder {
              self.value = value
              return self
            }
        @discardableResult
            public func clearValue() -> MapCell.Builder {
               builderResult.hasValue = false
               builderResult.value = .unknown
               return self
            }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> MapCell.Builder {
            builderResult = MapCell()
            return self
        }
        override public func clone() throws -> MapCell.Builder {
            return try MapCell.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> MapCell {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> MapCell {
            let returnMe:MapCell = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:MapCell) throws -> MapCell.Builder {
            if other == MapCell() {
                return self
            }
            if other.hasX {
                x = other.x
            }
            if other.hasY {
                y = other.y
            }
            if other.hasValue {
                value = other.value
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> MapCell.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MapCell.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    x = try codedInputStream.readUInt32()

                case 16:
                    y = try codedInputStream.readUInt32()

                case 24:
                    let valueIntvalue = try codedInputStream.readEnum()
                    if let enumsvalue = MapCell.Value(rawValue:valueIntvalue){
                        value = enumsvalue
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntvalue))
                    }

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> MapCell.Builder {
            let resultDecodedBuilder = MapCell.Builder()
            if let jsonValueX = jsonMap["x"] as? UInt {
                resultDecodedBuilder.x = UInt32(jsonValueX)
            } else if let jsonValueX = jsonMap["x"] as? String {
                resultDecodedBuilder.x = UInt32(jsonValueX)!
            }
            if let jsonValueY = jsonMap["y"] as? UInt {
                resultDecodedBuilder.y = UInt32(jsonValueY)
            } else if let jsonValueY = jsonMap["y"] as? String {
                resultDecodedBuilder.y = UInt32(jsonValueY)!
            }
            if let jsonValueValue = jsonMap["value"] as? String {
                resultDecodedBuilder.value = try MapCell.Value.fromString(jsonValueValue)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> MapCell.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try MapCell.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class Map : GeneratedMessage {
    public typealias BuilderType = Map.Builder

    public static func == (lhs: Map, rhs: Map) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasWidth == rhs.hasWidth) && (!lhs.hasWidth || lhs.width == rhs.width)
        fieldCheck = fieldCheck && (lhs.hasHeight == rhs.hasHeight) && (!lhs.hasHeight || lhs.height == rhs.height)
        fieldCheck = fieldCheck && (lhs.mapCell == rhs.mapCell)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var width:UInt32! = nil
    public fileprivate(set) var hasWidth:Bool = false

    public fileprivate(set) var height:UInt32! = nil
    public fileprivate(set) var hasHeight:Bool = false

    public fileprivate(set) var mapCell:Array<MapCell>  = Array<MapCell>()
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasWidth {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(Map.self): field \"width\" mark required")
        }
        if !hasHeight {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(Map.self): field \"height\" mark required")
        }
        for oneElementMapCell in mapCell {
            try oneElementMapCell.isInitialized()
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasWidth {
            try codedOutputStream.writeUInt32(fieldNumber: 1, value:width)
        }
        if hasHeight {
            try codedOutputStream.writeUInt32(fieldNumber: 2, value:height)
        }
        for oneElementMapCell in mapCell {
              try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementMapCell)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasWidth {
            serialize_size += width.computeUInt32Size(fieldNumber: 1)
        }
        if hasHeight {
            serialize_size += height.computeUInt32Size(fieldNumber: 2)
        }
        for oneElementMapCell in mapCell {
            serialize_size += oneElementMapCell.computeMessageSize(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> Map.Builder {
        return Map.classBuilder() as! Map.Builder
    }
    public func getBuilder() -> Map.Builder {
        return classBuilder() as! Map.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Map.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return Map.Builder()
    }
    public func toBuilder() throws -> Map.Builder {
        return try Map.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:Map) throws -> Map.Builder {
        return try Map.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasWidth {
            jsonMap["width"] = UInt(width)
        }
        if hasHeight {
            jsonMap["height"] = UInt(height)
        }
        if !mapCell.isEmpty {
            var jsonArrayMapCell:Array<Dictionary<String,Any>> = []
            for oneValueMapCell in mapCell {
                let ecodedMessageMapCell = try oneValueMapCell.encode()
                jsonArrayMapCell.append(ecodedMessageMapCell)
            }
            jsonMap["mapCell"] = jsonArrayMapCell
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Map {
        return try Map.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> Map {
        return try Map.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasWidth {
            output += "\(indent) width: \(width) \n"
        }
        if hasHeight {
            output += "\(indent) height: \(height) \n"
        }
        var mapCellElementIndex:Int = 0
        for oneElementMapCell in mapCell {
            output += "\(indent) mapCell[\(mapCellElementIndex)] {\n"
            output += try oneElementMapCell.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            mapCellElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasWidth {
                hashCode = (hashCode &* 31) &+ width.hashValue
            }
            if hasHeight {
                hashCode = (hashCode &* 31) &+ height.hashValue
            }
            for oneElementMapCell in mapCell {
                hashCode = (hashCode &* 31) &+ oneElementMapCell.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Map"
    }
    override public func className() -> String {
        return "Map"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:Map = Map()
        public func getMessage() -> Map {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var width:UInt32 {
            get {
                return builderResult.width
            }
            set (value) {
                builderResult.hasWidth = true
                builderResult.width = value
            }
        }
        public var hasWidth:Bool {
            get {
                return builderResult.hasWidth
            }
        }
        @discardableResult
        public func setWidth(_ value:UInt32) -> Map.Builder {
            self.width = value
            return self
        }
        @discardableResult
        public func clearWidth() -> Map.Builder{
            builderResult.hasWidth = false
            builderResult.width = nil
            return self
        }
        public var height:UInt32 {
            get {
                return builderResult.height
            }
            set (value) {
                builderResult.hasHeight = true
                builderResult.height = value
            }
        }
        public var hasHeight:Bool {
            get {
                return builderResult.hasHeight
            }
        }
        @discardableResult
        public func setHeight(_ value:UInt32) -> Map.Builder {
            self.height = value
            return self
        }
        @discardableResult
        public func clearHeight() -> Map.Builder{
            builderResult.hasHeight = false
            builderResult.height = nil
            return self
        }
        public var mapCell:Array<MapCell> {
            get {
                return builderResult.mapCell
            }
            set (value) {
                builderResult.mapCell = value
            }
        }
        @discardableResult
        public func setMapCell(_ value:Array<MapCell>) -> Map.Builder {
            self.mapCell = value
            return self
        }
        @discardableResult
        public func clearMapCell() -> Map.Builder {
            builderResult.mapCell.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> Map.Builder {
            builderResult = Map()
            return self
        }
        override public func clone() throws -> Map.Builder {
            return try Map.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> Map {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> Map {
            let returnMe:Map = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:Map) throws -> Map.Builder {
            if other == Map() {
                return self
            }
            if other.hasWidth {
                width = other.width
            }
            if other.hasHeight {
                height = other.height
            }
            if !other.mapCell.isEmpty  {
                 builderResult.mapCell += other.mapCell
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Map.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Map.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    width = try codedInputStream.readUInt32()

                case 16:
                    height = try codedInputStream.readUInt32()

                case 26:
                    let subBuilder = MapCell.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    mapCell.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Map.Builder {
            let resultDecodedBuilder = Map.Builder()
            if let jsonValueWidth = jsonMap["width"] as? UInt {
                resultDecodedBuilder.width = UInt32(jsonValueWidth)
            } else if let jsonValueWidth = jsonMap["width"] as? String {
                resultDecodedBuilder.width = UInt32(jsonValueWidth)!
            }
            if let jsonValueHeight = jsonMap["height"] as? UInt {
                resultDecodedBuilder.height = UInt32(jsonValueHeight)
            } else if let jsonValueHeight = jsonMap["height"] as? String {
                resultDecodedBuilder.height = UInt32(jsonValueHeight)!
            }
            if let jsonValueMapCell = jsonMap["mapCell"] as? Array<Dictionary<String,Any>> {
                var jsonArrayMapCell:Array<MapCell> = []
                for oneValueMapCell in jsonValueMapCell {
                    let messageFromStringMapCell = try MapCell.Builder.decodeToBuilder(jsonMap:oneValueMapCell).build()

                    jsonArrayMapCell.append(messageFromStringMapCell)
                }
                resultDecodedBuilder.mapCell = jsonArrayMapCell
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> Map.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try Map.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension MapCell: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<MapCell> {
        var mergedArray = Array<MapCell>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> MapCell? {
        return try MapCell.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> MapCell {
        return try MapCell.Builder().mergeFrom(data: data, extensionRegistry:MapRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> MapCell {
        return try MapCell.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> MapCell {
        return try MapCell.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> MapCell {
        return try MapCell.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> MapCell {
        return try MapCell.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> MapCell {
        return try MapCell.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "x": return self.x
        case "y": return self.y
        case "value": return self.value
        default: return nil
        }
    }
}
extension MapCell.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = MapCell
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "x": return self.x
            case "y": return self.y
            case "value": return self.value
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "x":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.x = newSubscriptValue
            case "y":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.y = newSubscriptValue
            case "value":
                guard let newSubscriptValue = newSubscriptValue as? MapCell.Value else {
                    return
                }
                self.value = newSubscriptValue
            default: return
            }
        }
    }
}
extension Map: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Map> {
        var mergedArray = Array<Map>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> Map? {
        return try Map.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> Map {
        return try Map.Builder().mergeFrom(data: data, extensionRegistry:MapRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Map {
        return try Map.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> Map {
        return try Map.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Map {
        return try Map.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> Map {
        return try Map.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Map {
        return try Map.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "width": return self.width
        case "height": return self.height
        case "mapCell": return self.mapCell
        default: return nil
        }
    }
}
extension Map.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = Map
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "width": return self.width
            case "height": return self.height
            case "mapCell": return self.mapCell
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "width":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.width = newSubscriptValue
            case "height":
                guard let newSubscriptValue = newSubscriptValue as? UInt32 else {
                    return
                }
                self.height = newSubscriptValue
            case "mapCell":
                guard let newSubscriptValue = newSubscriptValue as? Array<MapCell> else {
                    return
                }
                self.mapCell = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
